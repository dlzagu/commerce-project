// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// Product
model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  image       String
  description String?
  sizes       String[]   @default(["S","M","L","XL"])
  quantity    Int
  price       Int
  categoryId  String      @db.ObjectId
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?
  deleted     Boolean     @default(false) // soft delete

   category Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  image       String
  description String
  products    Product[]
}

enum Status {
  Created
  NotPaid
  Processing
  Failed
  Paid
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  orderId   String  @db.ObjectId
  quantity  Int
  price     Int
  amount    Int

  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String      @db.ObjectId
  status                    Status      @default(Created)
  orderItems                OrderItem[]
  recevier     String?
  address      String?
  phoneNumber  String?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime?

  user                      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Next-Auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}



enum UserType {
  User
  Admin
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword  String?
  favoriteIds     String[] @db.ObjectId
  createdAt     DateTime  @default(now())
  accounts      Account[]
  orders        Order[]
  userType      UserType  @default(User)
}

